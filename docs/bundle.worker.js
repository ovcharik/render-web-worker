(function(){"use strict";var __webpack_modules__={827:function(__unused_webpack_module,exports){eval('var __webpack_unused_export__;\n\n__webpack_unused_export__ = ({ value: true });\nvar log = Math.log, tan = Math.tan, sin = Math.sin, pow = Math.pow, sqrt = Math.sqrt, round = Math.round;\nvar RAD_1 = Math.PI / 180;\nvar RAD_90 = Math.PI / 4;\nvar M_RADIUS = 6378137.0;\nvar M_RADIUS_MINOR = 6356752.3142;\nvar M_RADIUS_FACTOR = (M_RADIUS - M_RADIUS_MINOR) / M_RADIUS;\nvar M_ECCENT = sqrt(2 * M_RADIUS_FACTOR - pow(M_RADIUS_FACTOR, 2));\nvar latLngToWsg84Mercator = function (_a) {\n    var lat = _a[0], lng = _a[1];\n    var radLng = lng * RAD_1;\n    var radLat = lat * RAD_1;\n    var sinLat = M_ECCENT * sin(radLat);\n    var divLat = (1 - sinLat) / (1 + sinLat);\n    var projLat = log(tan(RAD_90 + radLat / 2) * Math.pow(divLat, (M_ECCENT / 2)));\n    return [M_RADIUS * radLng, M_RADIUS * projLat];\n};\nvar getLatLngToPoint = function (_a, size) {\n    var lbLatLng = _a[0], rtLatLng = _a[1];\n    var _b = latLngToWsg84Mercator(lbLatLng), left = _b[0], bottom = _b[1];\n    var _c = latLngToWsg84Mercator(rtLatLng), right = _c[0], top = _c[1];\n    var width = (left - right) / size[0];\n    var height = (top - bottom) / size[1];\n    return function (geoPoint) {\n        var _a = latLngToWsg84Mercator(geoPoint), xMerc = _a[0], yMerc = _a[1];\n        return [round((left - xMerc) / width), round((top - yMerc) / height)];\n    };\n};\nvar blend = function (color1, color2, alpha) {\n    // debugger;\n    var rb = color1 & 0xff00ff;\n    var g = color1 & 0x00ff00;\n    rb += (((color2 & 0xff00ff) - rb) * alpha) >> 8;\n    g += (((color2 & 0x00ff00) - g) * alpha) >> 8;\n    return (rb & 0xff00ff) | (g & 0xff00);\n};\nvar compose = function (array1, width1, height1, array2, width2, height2, x1, y1) {\n    var xOffset1;\n    for (var y2 = 0; y2 < height2; y2++) {\n        var yOffset1 = y1 + y2;\n        if (height1 < yOffset1)\n            break;\n        xOffset1 = yOffset1 * width1 + x1;\n        if (xOffset1 < 0)\n            continue;\n        for (var x2 = 0; x2 < width2; x2++) {\n            var xOffset2 = y2 * height2 + x2;\n            var color2 = array2[xOffset2];\n            if (color2) {\n                // const color1 = array1[xOffset1];\n                array1[xOffset1] = color2;\n                // array1[xOffset1] = !color1\n                //   ? color2\n                //   : blend(color1 >> 8, color2 >> 8, (color2 & 0xff000000) >> 24);\n            }\n            xOffset1++;\n            if (array1.length < xOffset1)\n                break;\n        }\n    }\n    return array1;\n};\nvar render = function (bounds, size, coords, pin) {\n    console.time("render");\n    var pinRadius = pin.radius, pinBuffer = pin.buffer;\n    var pinSize = pinRadius * 2;\n    var pinBitmap = new Uint32Array(pinBuffer);\n    var getPoint = getLatLngToPoint(bounds, size);\n    var width = size[0], height = size[1];\n    var buffer = new ArrayBuffer(width * height * 4);\n    var bitmap = new Uint32Array(buffer);\n    for (var i = 0; i < coords.length / 2; i++) {\n        var _a = getPoint([coords[i * 2], coords[i * 2 + 1]]), x = _a[0], y = _a[1];\n        // prettier-ignore\n        compose(bitmap, width, height, pinBitmap, pinSize, pinSize, x - pinRadius, y - pinRadius);\n    }\n    var corner = [0, 0];\n    console.timeEnd("render");\n    postMessage({ type: "compose", payload: { bounds: bounds, corner: corner, size: size, buffer: buffer } }, { transfer: [buffer] });\n};\nvar selfPin;\nvar selfCoords;\nonmessage = function (_a) {\n    var _b = _a.data, type = _b.type, payload = _b.payload;\n    console.log(type, payload);\n    switch (type) {\n        case "init": {\n            selfPin = payload.pin;\n            return;\n        }\n        case "coords": {\n            selfCoords = new Float32Array(payload);\n            return;\n        }\n        case "render": {\n            var bounds = payload.bounds, size = payload.size;\n            render(bounds, size, selfCoords, selfPin);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///827\n')}},__webpack_exports__={};__webpack_modules__[827](0,__webpack_exports__)})();